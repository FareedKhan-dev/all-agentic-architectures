# -*- coding: utf-8 -*-
"""
Catalogue des 17 patterns (synthèse pédagogique issue du rapport).
Les champs 'detail_technique', 'implication_backend', 'compromis_cout_latence'
acceptent du Markdown (rendu côté frontend).
"""

from .schemas import PatternMeta

PATTERNS: list[PatternMeta] = [
    PatternMeta(
        id_pattern="cot",
        nom_fr="Chain-of-Thought (CoT)",
        categorie="Raisonnement",
        fonctionnement_court="Raisonnement linéaire explicite étape par étape.",
        utilite_concrets=[
            "Traçabilité de la décision",
            "Meilleure exactitude logique/maths",
        ],
        detail_technique=(
            "Forcer le modèle à expliciter ses étapes. Prompting dirigé, sortie structurée."
        ),
        implication_backend="Aucun outil requis. Peut utiliser un modèle économique.",
        compromis_cout_latence="Latence ↑ (verbiage), coût ↑ modéré car plus de tokens.",
        has_demo=False,
        tags=["reasoning", "explainability"],
    ),
    PatternMeta(
        id_pattern="tot",
        nom_fr="Tree-of-Thoughts (ToT)",
        categorie="Raisonnement",
        fonctionnement_court="Exploration arborescente (largeur/profondeur) avec scoring/élagage.",
        utilite_concrets=[
            "Planification stratégique",
            "Problèmes multi-étapes complexes",
        ],
        detail_technique="Génère plusieurs 'pensées', évalue, explore, backtracking possible.",
        implication_backend="Besoin d’un contrôleur d’arbre et d’un évaluateur (LLM-as-judge).",
        compromis_cout_latence="Coût ↑↑ et latence ↑↑ (multiples générations/évaluations).",
        has_demo=False,
        tags=["search", "planning"],
    ),
    PatternMeta(
        id_pattern="got",
        nom_fr="Graph-of-Thought (GoT)",
        categorie="Raisonnement",
        fonctionnement_court="Réseau non linéaire de pensées interconnectées.",
        utilite_concrets=["Domaines à fortes dépendances", "Ingénierie/juridique"],
        detail_technique="Noeuds de pensée liés par dépendance/pertinence; requiert stockage graphe.",
        implication_backend="Intégration base graphe (ex. Neo4j) recommandée.",
        compromis_cout_latence="Complexité d’implémentation ↑, latence/coût variables.",
        has_demo=False,
        tags=["graph", "knowledge"],
    ),
    PatternMeta(
        id_pattern="self_consistency",
        nom_fr="Self-Consistency",
        categorie="Raisonnement",
        fonctionnement_court="N exécutions variées → vote majoritaire.",
        utilite_concrets=["Fiabilité ↑", "Réduction des hallucinations ponctuelles"],
        detail_technique="Réexécuter plusieurs chaînes, agréger par consensus.",
        implication_backend="Boucle d’échantillonnage + agrégation.",
        compromis_cout_latence="Coût N×; latence N×.",
        has_demo=False,
        tags=["votes", "validation"],
    ),
    PatternMeta(
        id_pattern="tool_use",
        nom_fr="Tool Use / Toolformer",
        categorie="Action",
        fonctionnement_court="Invocation d’outils/APIs et fusion des observations.",
        utilite_concrets=["Données temps-réel", "Actions concrètes"],
        detail_technique="Binding d’outils + schéma arguments + intégration observation.",
        implication_backend="Couche outils sécurisée (auth, logs).",
        compromis_cout_latence="Latence dépend réseau/outils; coût externe possible.",
        has_demo=True,
        tags=["tools", "web"],
    ),
    PatternMeta(
        id_pattern="react",
        nom_fr="ReAct (Reason & Act)",
        categorie="Action",
        fonctionnement_court="Boucle Raisonnement→Action→Observation itérative.",
        utilite_concrets=["Tâches dynamiques", "Exploration adaptative"],
        detail_technique="Condition d’arrêt, état persistant, tool_calls successifs.",
        implication_backend="Orchestration précise de la boucle; gestion d’état.",
        compromis_cout_latence="Itérations multiples → latence ↑ et coût ↑.",
        has_demo=False,
        tags=["loop", "tools"],
    ),
    PatternMeta(
        id_pattern="simulation",
        nom_fr="Simulation Pattern",
        categorie="Action",
        fonctionnement_court="Tester des plans dans un environnement virtuel sans risque.",
        utilite_concrets=["Réduction des risques", "Validation de stratégies"],
        detail_technique="Sandbox/simulateur ; instrumentation des résultats simulés.",
        implication_backend="Moteur de simulation dédié.",
        compromis_cout_latence="Coût/latence selon complexité de la simulation.",
        has_demo=False,
        tags=["sandbox", "what-if"],
    ),
    PatternMeta(
        id_pattern="world_models",
        nom_fr="World Models",
        categorie="Action",
        fonctionnement_court="Représentation interne des entités/règles/dynamique.",
        utilite_concrets=["Planification long-terme", "Anticipation d’effets"],
        detail_technique="Modèle du monde mis à jour par observations et feedback.",
        implication_backend="Base de connaissances évolutive + mises à jour.",
        compromis_cout_latence="Coût de maintenance du modèle; gains en efficacité.",
        has_demo=False,
        tags=["state", "planning"],
    ),
    PatternMeta(
        id_pattern="reflection",
        nom_fr="Reflection",
        categorie="Amélioration",
        fonctionnement_court="Auto-critique puis réécriture/ajustement.",
        utilite_concrets=["Amélioration continue", "Correction d’erreurs"],
        detail_technique="Brouillon→Critique→Réécriture, mémoire d’exécution utile.",
        implication_backend="Tracer erreurs/itérations; conserver historique.",
        compromis_cout_latence="Latence ↑ (deux passages), coût ↑.",
        has_demo=True,
        tags=["quality", "self-improve"],
    ),
    PatternMeta(
        id_pattern="critic",
        nom_fr="Critic Pattern",
        categorie="Amélioration",
        fonctionnement_court="Agent évaluateur indépendant (score/avis).",
        utilite_concrets=["Gouvernance", "Conformité/politiques"],
        detail_technique="LLM-as-judge avec critères explicites.",
        implication_backend="Forcer passage par le critique sur étapes clés.",
        compromis_cout_latence="Coût ↑ (jugement externe).",
        has_demo=False,
        tags=["governance", "review"],
    ),
    PatternMeta(
        id_pattern="curriculum",
        nom_fr="Curriculum Learning",
        categorie="Amélioration",
        fonctionnement_court="Progression graduée des tâches par difficulté.",
        utilite_concrets=["Généralisation ↑", "Pédagogie agents"],
        detail_technique="Meta-control classe/route par difficulté.",
        implication_backend="Notions de niveaux, file d’attente, datasets gradués.",
        compromis_cout_latence="Coût d’ingénierie; latence variable.",
        has_demo=False,
        tags=["training", "pedagogy"],
    ),
    PatternMeta(
        id_pattern="pev",
        nom_fr="PEV (Plan-Execute-Verify/Reflect)",
        categorie="Amélioration",
        fonctionnement_court="Séparation Plan/Exécution/Vérification structurée.",
        utilite_concrets=["Fiabilité entreprise", "Traçabilité forte"],
        detail_technique="Plan (LLM fort) → Execute (agents/outils) → Verify/Reflect.",
        implication_backend="Rôles séparés, rapports d’étape, critères de succès.",
        compromis_cout_latence="Plusieurs passes → coût/latence ↑ mais robustesse ↑.",
        has_demo=False,
        tags=["workflow", "robust"],
    ),
    PatternMeta(
        id_pattern="meta_control",
        nom_fr="Meta-Control",
        categorie="Orchestration",
        fonctionnement_court="Agent maître (leadership) déléguant/supervisant.",
        utilite_concrets=["Optimisation d’ensemble", "Coordination"],
        detail_technique="Gère objectifs, ressources, performances, conflits.",
        implication_backend="Positionné au niveau Orchestrateur (LangGraph).",
        compromis_cout_latence="Complexité ↑; bénéfices à l’échelle.",
        has_demo=False,
        tags=["control", "manager"],
    ),
    PatternMeta(
        id_pattern="delegation",
        nom_fr="Delegation",
        categorie="Orchestration",
        fonctionnement_court="Assignation de sous-tâches à des agents experts.",
        utilite_concrets=["Efficacité", "Précision spécialisée"],
        detail_technique="Handoff + contexte structuré.",
        implication_backend="Transfert d’état complet; payload standardisé.",
        compromis_cout_latence="Overhead de coordination.",
        has_demo=False,
        tags=["handoff", "specialists"],
    ),
    PatternMeta(
        id_pattern="ensembling",
        nom_fr="Ensembling",
        categorie="Orchestration",
        fonctionnement_court="Combinaison des sorties de plusieurs agents/modèles.",
        utilite_concrets=["Fiabilité ↑", "Biais ↓"],
        detail_technique="Stratégies d’agrégation/pondération; consensus.",
        implication_backend="Agent ‘Aggregator’ dédié.",
        compromis_cout_latence="Coût ↑ (multiples appels); latence ↑.",
        has_demo=False,
        tags=["ensemble", "consensus"],
    ),
    PatternMeta(
        id_pattern="controlled_flow",
        nom_fr="Controlled Flow / Sequential Orchestration",
        categorie="Orchestration",
        fonctionnement_court="Chaîne linéaire fixe; sortie→entrée suivante.",
        utilite_concrets=["Auditabilité", "Déterminisme"],
        detail_technique="Workflow statique; edges codés.",
        implication_backend="Simple; parfait pour cas bien connus.",
        compromis_cout_latence="Latence prévisible; flexibilité faible.",
        has_demo=False,
        tags=["workflow", "deterministic"],
    ),
    PatternMeta(
        id_pattern="llm_router",
        nom_fr="LLM as Router",
        categorie="Orchestration",
        fonctionnement_court="Le LLM aiguillle dynamiquement vers l’agent pertinent.",
        utilite_concrets=["Flexibilité temps-réel", "Couverture large de requêtes"],
        detail_technique="Prompt liste agents + compétences; retour id destination.",
        implication_backend="Routeur devant l’orchestrateur; mapping id→exécuteur.",
        compromis_cout_latence="Coût ↑ modéré; gain majeur en adaptabilité.",
        has_demo=False,
        tags=["router", "dynamic"],
    ),
]
